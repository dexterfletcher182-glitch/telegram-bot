import os, json, random
from datetime import datetime
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
import telebot

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TZ = pytz.timezone("Asia/Makassar")  # –ë–∞–ª–∏
USERS_FILE = "data/users.json"
TOKEN = os.getenv("BOT_TOKEN", "").strip()  # –ó–ê–î–ê–ô –í –†–ï–ù–î–ï–†–ï –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# ==== –¢–ï–ö–°–¢–´ ====
morning_openers = [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ù–µ –∑–∞–±—É–¥—å —É–ª—ã–±–Ω—É—Ç—å—Å—è üôÇ",
    "–ü—Ä–æ—Å–Ω—É–ª—Å—è? –£–ª—ã–±–∫–∞ ‚Äî –ª—É—á—à–∏–π —Å—Ç–∞—Ä—Ç –¥–Ω—è! üòÅ",
    "–£–ª—ã–±–Ω–∏—Å—å –Ω–æ–≤–æ–º—É –¥–Ω—é! üåû",
    "–ù–∞—á–Ω—ë–º –º—è–≥–∫–æ. –°–¥–µ–ª–∞–π –≤–¥–æ—Ö-–≤—ã–¥–æ—Ö –∏ —É–ª—ã–±–Ω–∏—Å—å üåº"
]

# –£—Ç—Ä–æ: –±–∞–∑–∞ ‚Äî –°–ù–´ + –ª—ë–≥–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ + –æ–¥–Ω–æ —Å–ª–æ–≤–æ-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
morning_questions = [
    "–ß—Ç–æ —Ç–µ–±–µ —Å–Ω–∏–ª–æ—Å—å? –ï—Å–ª–∏ –ø–æ–º–Ω–∏—à—å ‚Äî –∑–∞–ø–∏—à–∏ üìù",
    "–ö–∞–∫–æ–µ –º—è–≥–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è? (–æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ–∫—É—Å)",
    "–û–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
]

# –í–µ—á–µ—Ä: –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
evening_questions = [
    "–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è?",
    "–ß—Ç–æ –±—ã–ª–æ —Å–ª–æ–∂–Ω—ã–º (–∏ –∫–∞–∫ —Ç—ã —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏–ª—Å—è)?",
    "–ß–µ–º—É —Ç—ã —Ä–∞–¥ —Å–µ–≥–æ–¥–Ω—è?"
]

# ==== –•–†–ê–ù–ò–õ–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====
def _ensure_store():
    os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)

def load_users():
    _ensure_store()
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_users(data):
    _ensure_store()
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ==== –†–ê–°–°–´–õ–ö–ò ====
def send_morning():
    users = load_users()
    now = datetime.now(TZ).isoformat()
    for chat_id in list(users.keys()):
        try:
            bot.send_message(chat_id, random.choice(morning_openers))
            for q in morning_questions:
                bot.send_message(chat_id, q)
            users[chat_id]["last_activity"] = now
        except Exception as e:
            # –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (403), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —É–¥–∞–ª–∏–º
            if getattr(e, "error_code", None) == 403:
                users.pop(chat_id, None)
            else:
                print(f"[morning] error for {chat_id}: {e}")
    save_users(users)
    print("‚úÖ Morning broadcast done")

def send_evening():
    users = load_users()
    now = datetime.now(TZ).isoformat()
    for chat_id in list(users.keys()):
        try:
            bot.send_message(chat_id, "–•–æ—á–µ—à—å –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è? üåô")
            for q in evening_questions:
                bot.send_message(chat_id, q)
            users[chat_id]["last_activity"] = now
        except Exception as e:
            if getattr(e, "error_code", None) == 403:
                users.pop(chat_id, None)
            else:
                print(f"[evening] error for {chat_id}: {e}")
    save_users(users)
    print("üåô Evening broadcast done")

# ==== –ö–û–ú–ê–ù–î–´ ====
@bot.message_handler(commands=["start"])
def cmd_start(m):
    users = load_users()
    cid = str(m.chat.id)
    users.setdefault(cid, {"subscribed_at": datetime.now(TZ).isoformat(), "last_activity": None})
    save_users(users)
    bot.reply_to(m,
        "–ü—Ä–∏–≤–µ—Ç! –Ø *inside* ‚Äî —Ç–≤–æ–π —Ç–∏—Ö–∏–π –¥—Ä—É–≥.\n"
        "–£—Ç—Ä–æ–º –≤ *08:00* –∏ –≤–µ—á–µ—Ä–æ–º –≤ *22:00* –ø–æ –ë–∞–ª–∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /test_morning ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ /test_evening ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ /stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )

@bot.message_handler(commands=["stop"])
def cmd_stop(m):
    users = load_users()
    cid = str(m.chat.id)
    if cid in users:
        users.pop(cid)
        save_users(users)
        bot.reply_to(m, "–û—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
    else:
        bot.reply_to(m, "–¢—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω üôÇ")

@bot.message_handler(commands=["test_morning"])
def cmd_test_morning(m):
    cid = str(m.chat.id)
    bot.send_message(cid, random.choice(morning_openers))
    for q in morning_questions:
        bot.send_message(cid, q)

@bot.message_handler(commands=["test_evening"])
def cmd_test_evening(m):
    cid = str(m.chat.id)
    bot.send_message(cid, "–•–æ—á–µ—à—å –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è? üåô")
    for q in evening_questions:
        bot.send_message(cid, q)

# –õ—é–±–æ–π —Ç–µ–∫—Å—Ç/–∞—É–¥–∏–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
@bot.message_handler(content_types=["text", "voice"])
def any_msg(m):
    # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –ø–æ—Ç–æ–º; –¥–ª—è MVP –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    bot.reply_to(m, "–ó–∞–ø–∏—Å–∞–ª ‚úçÔ∏è")

# ==== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ====
scheduler = BackgroundScheduler(timezone=TZ)
scheduler.add_job(send_morning, "cron", hour=8, minute=0)
scheduler.add_job(send_evening, "cron", hour=22, minute=0)
scheduler.start()

if __name__ == "__main__":
    print("‚úÖ inside-bot running (polling)‚Ä¶")
    bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=30)